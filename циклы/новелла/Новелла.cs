using System;
using System.Collections.Generic;

namespace AnimeElectricianNovel
{
    class Program
    {
        // –ö–ª–∞—Å—Å –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è
        class Protagonist
        {
            public string Name { get; } = "–ö–∞–∏—Ç–æ –ò—Ç–æ";
            public int Wires { get; set; } = 15;
            public int AnimePower { get; set; } = 5;
            public List<string> KnownQuotes { get; } = new List<string>()
            {
                "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ - —ç—Ç–æ –∂–∏–∑–Ω—å!",
                "–ë–∞–Ω–∫–∞–π: –ú–æ–ª–Ω–∏–µ–≤—ã–π –º–æ–Ω—Ç–∞–∂–Ω–∏–∫!",
                "–Ø –≤–∏–¥–µ–ª —ç—Ç–æ –≤ –∞–Ω–∏–º–µ!"
            };
            public bool HasSpecialGloves { get; set; } = true;
            public int Reputation { get; set; } = 0;
        }

        static Protagonist hero = new Protagonist();
        static Random random = new Random();
        static bool hasArtifact = false;

        static void Main()
        {
            SetupConsole();
            ShowIntroduction();
            Chapter1_PowerStation();
        }

        static void SetupConsole()
        {
            Console.Title = "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–µ—Ä-–∞–Ω–∏–º–µ—à–Ω–∏–∫: –ü—Ä–æ–±–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏";
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.CursorVisible = false;
        }

        static void ShowIntroduction()
        {
            Console.Clear();
            PrintHeader("ÈõªÊíÉ„ÅÆÂÜíÈô∫„ÅåÂßã„Åæ„ÇãÔºÅ");
            Console.WriteLine("–í—ã - –ö–∞–∏—Ç–æ –ò—Ç–æ, 28-–ª–µ—Ç–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω–∏–∫ –∏ –∑–∞—è–¥–ª—ã–π –æ—Ç–∞–∫—É.");
            Console.WriteLine("–í –æ–±—ã—á–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ ‚Ññ7 –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ—á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ...\n");
            WaitForInput();
        }

        static void Chapter1_PowerStation()
        {
            Console.Clear();
            PrintHeader("–ü–û–î–°–¢–ê–ù–¶–ò–Ø ‚Ññ7. –£–¢–†–û");

            Console.WriteLine("–ü–µ—Ä–µ–¥ –≤–∞–º–∏:");
            Console.WriteLine("- –ò—Å–∫—Ä—è—â–∏–π—Å—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä");
            Console.WriteLine("- –°—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ —â–∏—Ç–∫–µ");
            Console.WriteLine("- –®–µ–ø–æ—Ç –∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏\n");

            Console.WriteLine("1. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–º–æ–Ω—Ç (-3 –∂–∏–ª—ã)");
            Console.WriteLine("2. –ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –∞–Ω–∏–º–µ-—Ü–∏—Ç–∞—Ç—É");
            Console.WriteLine("3. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã");
            Console.WriteLine("4. –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É");

            switch (GetChoice(1, 4))
            {
                case 1:
                    StandardRepair();
                    break;
                case 2:
                    UseAnimeQuote();
                    break;
                case 3:
                    InvestigateSymbols();
                    break;
                case 4:
                    IgnoreAnomaly();
                    break;
            }
        }

        static void StandardRepair()
        {
            hero.Wires -= 3;
            Console.WriteLine("\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—á–∏–Ω–∏–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.");
            
            if (random.Next(100) < 30)
            {
                Console.WriteLine("–ù–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...");
                hero.AnimePower += 2;
                Console.WriteLine("–í–∞—à–∞ –∞–Ω–∏–º–µ-—Å–∏–ª–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å!");
            }

            CheckResources();
            Chapter2_City();
        }

        static void UseAnimeQuote()
        {
            if (hero.KnownQuotes.Count == 0)
            {
                Console.WriteLine("\n–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ü–∏—Ç–∞—Ç!");
                Chapter1_PowerStation();
                return;
            }

            string quote = hero.KnownQuotes[random.Next(hero.KnownQuotes.Count)];
            Console.WriteLine($"\n–í—ã –∫—Ä–∏—á–∏—Ç–µ: \"{quote}\"");

            if (random.Next(100) < 50 + hero.AnimePower)
            {
                Console.WriteLine("–≠—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ! –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ—á–∏–Ω–µ–Ω–æ!");
                hero.Reputation += 1;
            }
            else
            {
                Console.WriteLine("–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ...");
                hero.Wires -= 2;
            }

            CheckResources();
            Chapter2_City();
        }

        static void CheckResources()
        {
            if (hero.Wires <= 0)
            {
                Console.WriteLine("\n–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã!");
                GameOver();
            }
        }

        static void Chapter2_City()
        {
            // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—é–∂–µ—Ç–∞...
        }

        static int GetChoice(int min, int max)
        {
            while (true)
            {
                Console.Write($"\n[{hero.Wires}üîå|{hero.AnimePower}‚ú®] –í—ã–±–æ—Ä: ");
                if (int.TryParse(Console.ReadLine(), out int choice) && choice >= min && choice <= max)
                    return choice;
                
                Console.WriteLine($"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min} –¥–æ {max}!");
            }
        }

        static void PrintHeader(string text)
        {
            Console.WriteLine(new string('‚ïê', text.Length + 4));
            Console.WriteLine($"  {text}");
            Console.WriteLine(new string('‚ïê', text.Length + 4) + "\n");
        }

        static void WaitForInput()
        {
            Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É...");
            Console.ReadKey();
        }
    }
}
